{
  const filteredData = Cancer.filter(d => d.Year >= 1990 && d.Year <= 2019);

  const cancerData = d3.rollup(
    filteredData.flatMap(d =>
      Object.keys(d)
        .filter(key => key.includes("Deaths"))
        .map(key => ({ cancerType: key, year: +d.Year, deaths: +d[key] }))
    ),
    v => d3.sum(v, d => d.deaths),
    d => d.cancerType
  );

  const topCancers = Array.from(cancerData)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(d => d[0]);

  const cleanCancerNames = topCancers.map(cancerType =>
    cancerType
      .replace("Deaths - ", "")
      .replace(" - Sex: Both - Age: All Ages (Number)", "")
  );

  const cancerYears = {};
  filteredData.forEach(d => {
    Object.keys(d)
      .filter(key => key.includes("Deaths"))
      .forEach(key => {
        if (topCancers.includes(key)) {
          if (!cancerYears[key]) cancerYears[key] = {};
          const year = d.Year;
          if (!cancerYears[key][year]) cancerYears[key][year] = 0;
          cancerYears[key][year] += +d[key];
        }
      });
  });

  const chartData = topCancers.map(cancerType => ({
    cancerType,
    values: Object.entries(cancerYears[cancerType])
      .map(([year, deaths]) => ({
        year: +year,
        deaths,
      }))
      .filter(v => v.deaths > 0),
  }));

  const width = 1000;
  const height = 500;
  const margin = { top: 40, right: 200, bottom: 70, left: 100 };

  const svg = d3.create("svg")
    .attr("viewBox", [0, 0, width, height])
    .style("background-color", "black");

  svg.append("text")
    .attr("x", width / 2)
    .attr("y", margin.top / 2)
    .attr("text-anchor", "middle")
    .style("font-size", "16px")
    .style("font-weight", "bold")
    .style("fill", "white")
    .text("Trends in Mortality Rates of Top 10 Cancer Types (1990â€“2019)");

  const x = d3
    .scaleLinear()
    .domain([1990, 2019])
    .range([margin.left, width - margin.right]);

  const y = d3
    .scaleLinear()
    .domain([0, d3.max(chartData, d => d3.max(d.values, v => v.deaths)) * 1.1])
    .nice()
    .range([height - margin.bottom, margin.top]);

  // Add x-axis gridlines
  svg.append("g")
    .attr("class", "grid")
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .call(d3.axisBottom(x).tickSize(-(height - margin.top - margin.bottom)).tickFormat(''))
    .call(g => g.selectAll("line").attr("stroke", "gray").attr("stroke-opacity", 0.5));

  // Add y-axis gridlines
  svg.append("g")
    .attr("class", "grid")
    .attr("transform", `translate(${margin.left}, 0)`)
    .call(d3.axisLeft(y).tickSize(-(width - margin.left - margin.right)).tickFormat(''))
    .call(g => g.selectAll("line").attr("stroke", "gray").attr("stroke-opacity", 0.5));

  const xAxis = svg
    .append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x).tickFormat(d3.format("d")))
    .call(g => {
      g.selectAll("text").style("font-size", "12px").style("fill", "white");
      g.selectAll("line").style("stroke", "white");
      g.selectAll("path").style("stroke", "white");
    });

  const yAxis = svg
    .append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(10))
    .call(g => {
      g.selectAll("text").style("font-size", "12px").style("fill", "white");
      g.selectAll("line").style("stroke", "white");
      g.selectAll("path").style("stroke", "white");
    });

  svg.append("text")
    .attr("x", width / 2)
    .attr("y", height - 30)
    .attr("text-anchor", "middle")
    .style("font-size", "14px")
    .style("font-weight", "bold")
    .style("fill", "white")
    .text("Years");

  svg.append("text")
    .attr("x", -height / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .attr("transform", "rotate(-90)")
    .style("font-size", "14px")
    .style("font-weight", "bold")
    .style("fill", "white")
    .text("Values");

  const line = d3
    .line()
    .x(d => x(d.year))
    .y(d => y(d.deaths));

  const colors = d3.scaleOrdinal(d3.schemeTableau10).domain(topCancers);

  const paths = {};
  chartData.forEach(d => {
    paths[d.cancerType] = svg.append("path")
      .datum(d.values)
      .attr("fill", "none")
      .attr("stroke", colors(d.cancerType))
      .attr("stroke-width", 4)
      .attr("d", line)
      .style("visibility", "visible");
  });

  const legend = svg.append("g").attr("transform", `translate(${width - margin.right}, ${margin.top})`);

  cleanCancerNames.forEach((cancer, i) => {
    legend.append("rect")
      .attr("x", 0)
      .attr("y", i * 20)
      .attr("width", 10)
      .attr("height", 10)
      .attr("fill", colors(topCancers[i]))
      .style("cursor", "pointer")
      .on("click", () => {
        const currentPath = paths[topCancers[i]];
        const currentVisibility = currentPath.style("visibility");
        currentPath.style("visibility", currentVisibility === "visible" ? "hidden" : "visible");
      });

    legend.append("text")
      .attr("x", 15)
      .attr("y", i * 20 + 10)
      .style("font-size", "12px")
      .style("fill", "white")
      .style("cursor", "pointer")
      .text(cancer)
      .on("click", () => {
        const currentPath = paths[topCancers[i]];
        const currentVisibility = currentPath.style("visibility");
        currentPath.style("visibility", currentVisibility === "visible" ? "hidden" : "visible");
      });
  });

  return svg.node();
}
