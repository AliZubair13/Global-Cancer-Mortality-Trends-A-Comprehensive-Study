{
  const processedData = Cancer.map(d => {
    const totalDeaths = Object.keys(d)
      .filter(key => key.startsWith("Deaths -") && key.endsWith("(Number)"))
      .reduce((sum, key) => sum + (+d[key] || 0), 0);
    return {
      year: +d.Year,
      totalDeaths: totalDeaths,
    };
  });

  const aggregatedData = d3.rollups(
    processedData,
    v => d3.sum(v, d => d.totalDeaths),
    d => d.year
  ).map(([year, totalDeaths]) => ({ year, totalDeaths }))
    .sort((a, b) => a.year - b.year);

  const width = 800;
  const height = 450;
  const margin = { top: 50, right: 150, bottom: 50, left: 80 };

  const svg = d3.create("svg")
    .attr("viewBox", `0 0 ${width} ${height}`)
    .style("background-color", "black");

  const x = d3.scaleLinear()
    .domain(d3.extent(aggregatedData, d => d.year))
    .range([margin.left, width - margin.right]);

  const y = d3.scaleLinear()
    .domain([0, d3.max(aggregatedData, d => d.totalDeaths)]).nice()
    .range([height - margin.bottom, margin.top]);

  // Add gridlines for x-axis
  svg.append("g")
    .attr("class", "grid")
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .call(d3.axisBottom(x).tickSize(-(height - margin.top - margin.bottom)).tickFormat(''))
    .call(g => g.selectAll("line").attr("stroke", "gray").attr("stroke-opacity", 0.5));

  // Add gridlines for y-axis
  svg.append("g")
    .attr("class", "grid")
    .attr("transform", `translate(${margin.left}, 0)`)
    .call(d3.axisLeft(y).tickSize(-(width - margin.left - margin.right)).tickFormat(''))
    .call(g => g.selectAll("line").attr("stroke", "gray").attr("stroke-opacity", 0.5));

  svg.append("g")
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .call(d3.axisBottom(x).tickFormat(d3.format("d")).tickSizeOuter(0))
    .call(g => g.selectAll("path,line").attr("stroke", "white"))
    .call(g => g.selectAll("text").attr("fill", "white"))
    .call(g => g.append("text")
      .attr("x", (width - margin.left - margin.right) / 2 + margin.left)
      .attr("y", 40)
      .attr("fill", "white")
      .attr("text-anchor", "middle")
      .attr("font-weight", "bold")
      .text("Year"));

  // Adjust y-axis translation for alignment with x-axis
  svg.append("g")
    .attr("transform", `translate(${margin.left + 1}, 0)`) // Moved slightly right
    .call(d3.axisLeft(y).tickSizeOuter(0))
    .call(g => g.selectAll("path,line").attr("stroke", "white"))
    .call(g => g.selectAll("text").attr("fill", "white"))
    .call(g => g.append("text")
      .attr("x", -(height - margin.top - margin.bottom) / 2)
      .attr("y", -60)
      .attr("fill", "white")
      .attr("text-anchor", "middle")
      .attr("font-weight", "bold")
      .attr("transform", "rotate(-90)")
      .text("Total Deaths"));

  const line = d3.line()
    .x(d => x(d.year))
    .y(d => y(d.totalDeaths))
    .curve(d3.curveMonotoneX);

  svg.append("path")
    .datum(aggregatedData)
    .attr("fill", "none")
    .attr("stroke", "darkblue")
    .attr("stroke-width", 3)
    .attr("d", line);

  svg.append("g")
    .selectAll("circle")
    .data(aggregatedData)
    .join("circle")
      .attr("cx", d => x(d.year))
      .attr("cy", d => y(d.totalDeaths))
      .attr("r", 4)
      .attr("fill", "darkblue")
      .attr("stroke", "white")
      .attr("stroke-width", 1.5)
      .on("mouseover", function(event, d) {
        tooltip.style("visibility", "visible")
          .html(`Year: ${d.year}<br>Total Deaths: ${d.totalDeaths}`)
          .style("left", `${event.pageX + 10}px`)
          .style("top", `${event.pageY - 28}px`);
      })
      .on("mouseout", function() {
        tooltip.style("visibility", "hidden");
      });

  svg.append("text")
    .attr("x", width / 2 - margin.right / 2)
    .attr("y", margin.top - 30)
    .attr("text-anchor", "middle")
    .attr("font-size", "20px")
    .attr("font-weight", "bold")
    .attr("fill", "white")
    .text("Global Cancer Mortality Trends (1990 - 2019)");

  const tooltip = d3.select("body").append("div")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("background-color", "rgba(255, 255, 255, 0.8)")
    .style("padding", "8px")
    .style("border-radius", "4px")
    .style("box-shadow", "0px 0px 6px #aaa")
    .style("pointer-events", "none");

  const legend = svg.append("g")
    .attr("transform", `translate(${width - margin.right + 20}, ${margin.top})`);

  legend.append("rect")
    .attr("width", 12)
    .attr("height", 12)
    .attr("fill", "darkblue");

  legend.append("text")
    .attr("x", 20)
    .attr("y", 10)
    .attr("font-size", "12px")
    .attr("text-anchor", "start")
    .attr("fill", "white")
    .text("Total Cancer Deaths");

  return svg.node();
}
