barcharttop10 = {
  
  const topCountries = processedData
    .map(country => ({
      entity: country.entity,
      maxDeaths: Math.max(...Object.values(country.years))
    }))
    .sort((a, b) => b.maxDeaths - a.maxDeaths)
    .slice(0, 10)
    .map((country, index) => ({ ...country, rank: index + 1 }));


  const width = 1150;
  const height = 600;
  const margin = { top: 60, right: 30, bottom: 60, left: 150 };
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;


  const xScale = d3.scaleLinear()
    .domain([0, d3.max(topCountries, d => d.maxDeaths)])
    .range([0, innerWidth]);

  const yScale = d3.scaleBand()
    .domain(topCountries.map(d => d.entity))
    .range([0, innerHeight])
    .padding(0.2);


  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("style", "background-color: black; font-family: Arial;");

 
  const chart = svg.append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);


  chart.append("g")
    .call(d3.axisBottom(xScale).ticks(5).tickSize(-innerHeight).tickFormat(""))
    .attr("transform", `translate(0,${innerHeight})`)
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line")
      .attr("stroke", "rgba(255,255,255,0.2)")
      .attr("stroke-dasharray", "4"));


  const tooltip = d3.select("body").append("div")
    .style("opacity", 0)
    .style("position", "absolute")
    .style("background-color", "rgba(0,0,0,0.8)")
    .style("color", "white")
    .style("padding", "10px")
    .style("border-radius", "5px")
    .style("font-size", "14px");

 
  chart.selectAll(".bar")
    .data(topCountries)
    .join("rect")
    .attr("class", "bar")
    .attr("y", d => yScale(d.entity))
    .attr("height", yScale.bandwidth())
    .attr("x", 0)
    .attr("width", 0) // Start with zero width for animation
    .style("fill", (d, i) => `hsl(${i * 36},70%,50%)`) // Gradient-like effect
    .on("mouseover", (event, d) => {
      tooltip.transition().duration(200).style("opacity", 1);
      tooltip.html(`
        <strong>Rank:</strong> ${d.rank}<br>
        <strong>Country:</strong> ${d.entity}<br>
        <strong>Deaths:</strong> ${d3.format(",")(d.maxDeaths)}<br>
        <strong>Percentage:</strong> ${(d.maxDeaths / d3.sum(topCountries.map(c => c.maxDeaths)) * 100).toFixed(2)}%
      `)
        .style("left", `${event.pageX + 10}px`)
        .style("top", `${event.pageY - 28}px`);
    })
    .on("mouseout", () => tooltip.transition().duration(500).style("opacity", 0))
    .transition()
    .duration(1000)
    .attr("width", d => xScale(d.maxDeaths));

  
  // Add x-axis
  chart.append("g")
    .call(d3.axisBottom(xScale).ticks(5))
    .attr("transform", `translate(0,${innerHeight})`)
    .call(g => g.selectAll(".tick text").attr("fill", "white").style("font-weight", "bold"))
    .call(g => g.selectAll(".tick line").attr("stroke-width", "2px"));

  // Add y-axis
  chart.append("g")
    .call(d3.axisLeft(yScale))
    .call(g => g.selectAll(".tick text").attr("fill", "white").style("font-weight", "bold"));


  svg.append("text")
    .attr("x", width / 2)
    .attr("y", margin.top / 2)
    .attr("text-anchor", "middle")
    .style("fill", "white")
    .style("font-size", "20px")
    .style("font-weight", "bold")
    .text(`Top 10 Countries with Maximum Cancer Deaths`);

  return svg.node();
}
